// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	jwt "muxi_auditor/pkg/jwt"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// RedisJWTHandlerInterface is an autogenerated mocks type for the RedisJWTHandlerInterface type
type RedisJWTHandlerInterface struct {
	mock.Mock
}

// CheckSession provides a mocks function with given fields: ctx, ssid
func (_m *RedisJWTHandlerInterface) CheckSession(ctx *gin.Context, ssid string) (bool, error) {
	ret := _m.Called(ctx, ssid)

	if len(ret) == 0 {
		panic("no return value specified for CheckSession")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string) (bool, error)); ok {
		return rf(ctx, ssid)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string) bool); ok {
		r0 = rf(ctx, ssid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string) error); ok {
		r1 = rf(ctx, ssid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearToken provides a mocks function with given fields: ctx
func (_m *RedisJWTHandlerInterface) ClearToken(ctx *gin.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClearToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseToken provides a mocks function with given fields: ctx
func (_m *RedisJWTHandlerInterface) ParseToken(ctx *gin.Context) (jwt.UserClaims, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 jwt.UserClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (jwt.UserClaims, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) jwt.UserClaims); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(jwt.UserClaims)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetJWTToken provides a mocks function with given fields: ctx, uid, name, userRole
func (_m *RedisJWTHandlerInterface) SetJWTToken(ctx *gin.Context, uid uint, name string, userRole int) error {
	ret := _m.Called(ctx, uid, name, userRole)

	if len(ret) == 0 {
		panic("no return value specified for SetJWTToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, uint, string, int) error); ok {
		r0 = rf(ctx, uid, name, userRole)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRedisJWTHandlerInterface creates a new instance of RedisJWTHandlerInterface. It also registers a testing interface on the mocks and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisJWTHandlerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisJWTHandlerInterface {
	mock := &RedisJWTHandlerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
