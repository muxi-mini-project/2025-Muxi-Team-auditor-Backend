// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "muxi_auditor/repository/model"

	request "muxi_auditor/api/request"

	time "time"
)

// UserDAOInterface is an autogenerated mock type for the UserDAOInterface type
type UserDAOInterface struct {
	mock.Mock
}

// AuditItem provides a mock function with given fields: ctx, req, id
func (_m *UserDAOInterface) AuditItem(ctx context.Context, req request.AuditReq, id uint) error {
	ret := _m.Called(ctx, req, id)

	if len(ret) == 0 {
		panic("no return value specified for AuditItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.AuditReq, uint) error); ok {
		r0 = rf(ctx, req, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeProjectRole provides a mock function with given fields: ctx, user, projectPermit
func (_m *UserDAOInterface) ChangeProjectRole(ctx context.Context, user model.User, projectPermit []model.ProjectPermit) error {
	ret := _m.Called(ctx, user, projectPermit)

	if len(ret) == 0 {
		panic("no return value specified for ChangeProjectRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, []model.ProjectPermit) error); ok {
		r0 = rf(ctx, user, projectPermit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserDAOInterface) Create(ctx context.Context, user *model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProject provides a mock function with given fields: ctx, project
func (_m *UserDAOInterface) CreateProject(ctx context.Context, project *model.Project) error {
	ret := _m.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Project) error); ok {
		r0 = rf(ctx, project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UserDAOInterface) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *UserDAOInterface) FindByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByProjectID provides a mock function with given fields: ctx, id
func (_m *UserDAOInterface) FindByProjectID(ctx context.Context, id uint) ([]model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByProjectID")
	}

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIDs provides a mock function with given fields: ctx, ids
func (_m *UserDAOInterface) FindByUserIDs(ctx context.Context, ids []uint) ([]model.User, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserIDs")
	}

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint) ([]model.User, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint) []model.User); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectDetails provides a mock function with given fields: ctx, id
func (_m *UserDAOInterface) GetProjectDetails(ctx context.Context, id uint) (model.Project, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectDetails")
	}

	var r0 model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (model.Project, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) model.Project); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Project)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectList provides a mock function with given fields: ctx, logo
func (_m *UserDAOInterface) GetProjectList(ctx context.Context, logo string) ([]model.Project, error) {
	ret := _m.Called(ctx, logo)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectList")
	}

	var r0 []model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.Project, error)); ok {
		return rf(ctx, logo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Project); ok {
		r0 = rf(ctx, logo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, logo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResponse provides a mock function with given fields: ctx, users
func (_m *UserDAOInterface) GetResponse(ctx context.Context, users []model.User) ([]model.UserResponse, error) {
	ret := _m.Called(ctx, users)

	if len(ret) == 0 {
		panic("no return value specified for GetResponse")
	}

	var r0 []model.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.User) ([]model.UserResponse, error)); ok {
		return rf(ctx, users)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []model.User) []model.UserResponse); ok {
		r0 = rf(ctx, users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []model.User) error); ok {
		r1 = rf(ctx, users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *UserDAOInterface) List(ctx context.Context) ([]model.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PPFUserByid provides a mock function with given fields: ctx, id
func (_m *UserDAOInterface) PPFUserByid(ctx context.Context, id uint) (model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for PPFUserByid")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) model.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, id
func (_m *UserDAOInterface) Read(ctx context.Context, id uint) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchHistory provides a mock function with given fields: ctx, items, id
func (_m *UserDAOInterface) SearchHistory(ctx context.Context, items *[]model.Item, id uint) error {
	ret := _m.Called(ctx, items, id)

	if len(ret) == 0 {
		panic("no return value specified for SearchHistory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]model.Item, uint) error); ok {
		r0 = rf(ctx, items, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: ctx, req
func (_m *UserDAOInterface) Select(ctx context.Context, req request.SelectReq) ([]model.Project, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 []model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.SelectReq) ([]model.Project, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.SelectReq) []model.Project); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.SelectReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectItemById provides a mock function with given fields: ctx, id
func (_m *UserDAOInterface) SelectItemById(ctx context.Context, id uint) (model.Item, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SelectItemById")
	}

	var r0 model.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (model.Item, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) model.Item); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, user, id
func (_m *UserDAOInterface) Update(ctx context.Context, user *model.User, id uint) error {
	ret := _m.Called(ctx, user, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, uint) error); ok {
		r0 = rf(ctx, user, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upload provides a mock function with given fields: ctx, req, id, _a3
func (_m *UserDAOInterface) Upload(ctx context.Context, req request.UploadReq, id uint, _a3 time.Time) error {
	ret := _m.Called(ctx, req, id, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.UploadReq, uint, time.Time) error); ok {
		r0 = rf(ctx, req, id, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserDAOInterface creates a new instance of UserDAOInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserDAOInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserDAOInterface {
	mock := &UserDAOInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
